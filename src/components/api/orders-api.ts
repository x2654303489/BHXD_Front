/* tslint:disable */
/* eslint-disable */
/**
 * 崩坏晓店
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Orders } from '../models';
// @ts-ignore
import type { Response } from '../models';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete
         * @param {number} id 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersDeleteDelete: async (id: number, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersDeleteDelete', 'id', id)
            const localVarPath = `/orders/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary insert
         * @param {string} [sessionStorage] 
         * @param {Orders} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersInsertPost: async (sessionStorage?: string, orders?: Orders, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/insert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orders, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary selectdivide
         * @param {number} pageNum 
         * @param {number} [pageSize] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersSelectdivideGet: async (pageNum: number, pageSize?: number, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNum' is not null or undefined
            assertParamExists('ordersSelectdivideGet', 'pageNum', pageNum)
            const localVarPath = `/orders/selectdivide`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary selectid
         * @param {number} [id] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersSelectidGet: async (id?: number, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/selectid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete
         * @param {number} id 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersDeleteDelete(id: number, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersDeleteDelete(id, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary insert
         * @param {string} [sessionStorage] 
         * @param {Orders} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersInsertPost(sessionStorage?: string, orders?: Orders, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersInsertPost(sessionStorage, orders, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersInsertPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary selectdivide
         * @param {number} pageNum 
         * @param {number} [pageSize] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersSelectdivideGet(pageNum: number, pageSize?: number, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersSelectdivideGet(pageNum, pageSize, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersSelectdivideGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary selectid
         * @param {number} [id] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersSelectidGet(id?: number, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersSelectidGet(id, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.ordersSelectidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @summary delete
         * @param {number} id 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersDeleteDelete(id: number, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.ordersDeleteDelete(id, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary insert
         * @param {string} [sessionStorage] 
         * @param {Orders} [orders] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersInsertPost(sessionStorage?: string, orders?: Orders, options?: any): AxiosPromise<Response> {
            return localVarFp.ordersInsertPost(sessionStorage, orders, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary selectdivide
         * @param {number} pageNum 
         * @param {number} [pageSize] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersSelectdivideGet(pageNum: number, pageSize?: number, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.ordersSelectdivideGet(pageNum, pageSize, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary selectid
         * @param {number} [id] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersSelectidGet(id?: number, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.ordersSelectidGet(id, sessionStorage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @summary delete
     * @param {number} id 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersDeleteDelete(id: number, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersDeleteDelete(id, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary insert
     * @param {string} [sessionStorage] 
     * @param {Orders} [orders] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersInsertPost(sessionStorage?: string, orders?: Orders, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersInsertPost(sessionStorage, orders, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary selectdivide
     * @param {number} pageNum 
     * @param {number} [pageSize] 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersSelectdivideGet(pageNum: number, pageSize?: number, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersSelectdivideGet(pageNum, pageSize, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary selectid
     * @param {number} [id] 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersSelectidGet(id?: number, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).ordersSelectidGet(id, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }
}

