/* tslint:disable */
/* eslint-disable */
/**
 * 崩坏晓店
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Response } from '../models';
// @ts-ignore
import type { Users } from '../models';
/**
 * CopyUsersControllerApi - axios parameter creator
 * @export
 */
export const CopyUsersControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addrole
         * @param {number} userid 
         * @param {string} roleid 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAddrolePost: async (userid: number, roleid: string, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('usersAddrolePost', 'userid', userid)
            // verify required parameter 'roleid' is not null or undefined
            assertParamExists('usersAddrolePost', 'roleid', roleid)
            const localVarPath = `/users/addrole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userid !== undefined) {
                localVarQueryParameter['userid'] = userid;
            }

            if (roleid !== undefined) {
                localVarQueryParameter['roleid'] = roleid;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete
         * @param {number} id 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeleteDelete: async (id: number, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersDeleteDelete', 'id', id)
            const localVarPath = `/users/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleterole
         * @param {number} userid 
         * @param {string} roleid 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeleteroleDelete: async (userid: number, roleid: string, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userid' is not null or undefined
            assertParamExists('usersDeleteroleDelete', 'userid', userid)
            // verify required parameter 'roleid' is not null or undefined
            assertParamExists('usersDeleteroleDelete', 'roleid', roleid)
            const localVarPath = `/users/deleterole`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userid !== undefined) {
                localVarQueryParameter['userid'] = userid;
            }

            if (roleid !== undefined) {
                localVarQueryParameter['roleid'] = roleid;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary insert
         * @param {string} [sessionStorage] 
         * @param {Users} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersInsertPost: async (sessionStorage?: string, users?: Users, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/insert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(users, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary loginuser
         * @param {Users} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginPost: async (users?: Users, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(users, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logoutUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLogoutGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary selectdivide
         * @param {number} pageNum 
         * @param {number} [pageSize] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSelectdivideGet: async (pageNum: number, pageSize?: number, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNum' is not null or undefined
            assertParamExists('usersSelectdivideGet', 'pageNum', pageNum)
            const localVarPath = `/users/selectdivide`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary selectid
         * @param {number} [id] 
         * @param {boolean} [isstatus] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSelectidGet: async (id?: number, isstatus?: boolean, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/selectid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (isstatus !== undefined) {
                localVarQueryParameter['isstatus'] = isstatus;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary selectname
         * @param {string} username 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSelectnameGet: async (username: string, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('usersSelectnameGet', 'username', username)
            const localVarPath = `/users/selectname`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary test
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersTestGet: async (sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updates
         * @param {string} [sessionStorage] 
         * @param {Users} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdatePut: async (sessionStorage?: string, users?: Users, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(users, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatestatus
         * @param {number} id 
         * @param {boolean} status 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdatestatusPut: async (id: number, status: boolean, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersUpdatestatusPut', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('usersUpdatestatusPut', 'status', status)
            const localVarPath = `/users/updatestatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CopyUsersControllerApi - functional programming interface
 * @export
 */
export const CopyUsersControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CopyUsersControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addrole
         * @param {number} userid 
         * @param {string} roleid 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersAddrolePost(userid: number, roleid: string, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersAddrolePost(userid, roleid, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersAddrolePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary delete
         * @param {number} id 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersDeleteDelete(id: number, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersDeleteDelete(id, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary deleterole
         * @param {number} userid 
         * @param {string} roleid 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersDeleteroleDelete(userid: number, roleid: string, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersDeleteroleDelete(userid, roleid, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersDeleteroleDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary insert
         * @param {string} [sessionStorage] 
         * @param {Users} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersInsertPost(sessionStorage?: string, users?: Users, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersInsertPost(sessionStorage, users, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersInsertPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary loginuser
         * @param {Users} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLoginPost(users?: Users, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLoginPost(users, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary logoutUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersLogoutGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersLogoutGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersLogoutGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary selectdivide
         * @param {number} pageNum 
         * @param {number} [pageSize] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersSelectdivideGet(pageNum: number, pageSize?: number, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersSelectdivideGet(pageNum, pageSize, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersSelectdivideGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary selectid
         * @param {number} [id] 
         * @param {boolean} [isstatus] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersSelectidGet(id?: number, isstatus?: boolean, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersSelectidGet(id, isstatus, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersSelectidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary selectname
         * @param {string} username 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersSelectnameGet(username: string, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersSelectnameGet(username, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersSelectnameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary test
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersTestGet(sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersTestGet(sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersTestGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary updates
         * @param {string} [sessionStorage] 
         * @param {Users} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUpdatePut(sessionStorage?: string, users?: Users, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdatePut(sessionStorage, users, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary updatestatus
         * @param {number} id 
         * @param {boolean} status 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersUpdatestatusPut(id: number, status: boolean, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersUpdatestatusPut(id, status, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyUsersControllerApi.usersUpdatestatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CopyUsersControllerApi - factory interface
 * @export
 */
export const CopyUsersControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CopyUsersControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary addrole
         * @param {number} userid 
         * @param {string} roleid 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersAddrolePost(userid: number, roleid: string, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.usersAddrolePost(userid, roleid, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete
         * @param {number} id 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeleteDelete(id: number, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.usersDeleteDelete(id, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleterole
         * @param {number} userid 
         * @param {string} roleid 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDeleteroleDelete(userid: number, roleid: string, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.usersDeleteroleDelete(userid, roleid, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary insert
         * @param {string} [sessionStorage] 
         * @param {Users} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersInsertPost(sessionStorage?: string, users?: Users, options?: any): AxiosPromise<Response> {
            return localVarFp.usersInsertPost(sessionStorage, users, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary loginuser
         * @param {Users} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLoginPost(users?: Users, options?: any): AxiosPromise<Response> {
            return localVarFp.usersLoginPost(users, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logoutUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersLogoutGet(options?: any): AxiosPromise<Response> {
            return localVarFp.usersLogoutGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary selectdivide
         * @param {number} pageNum 
         * @param {number} [pageSize] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSelectdivideGet(pageNum: number, pageSize?: number, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.usersSelectdivideGet(pageNum, pageSize, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary selectid
         * @param {number} [id] 
         * @param {boolean} [isstatus] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSelectidGet(id?: number, isstatus?: boolean, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.usersSelectidGet(id, isstatus, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary selectname
         * @param {string} username 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersSelectnameGet(username: string, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.usersSelectnameGet(username, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary test
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersTestGet(sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.usersTestGet(sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updates
         * @param {string} [sessionStorage] 
         * @param {Users} [users] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdatePut(sessionStorage?: string, users?: Users, options?: any): AxiosPromise<Response> {
            return localVarFp.usersUpdatePut(sessionStorage, users, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updatestatus
         * @param {number} id 
         * @param {boolean} status 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUpdatestatusPut(id: number, status: boolean, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.usersUpdatestatusPut(id, status, sessionStorage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CopyUsersControllerApi - object-oriented interface
 * @export
 * @class CopyUsersControllerApi
 * @extends {BaseAPI}
 */
export class CopyUsersControllerApi extends BaseAPI {
    /**
     * 
     * @summary addrole
     * @param {number} userid 
     * @param {string} roleid 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersAddrolePost(userid: number, roleid: string, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersAddrolePost(userid, roleid, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete
     * @param {number} id 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersDeleteDelete(id: number, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersDeleteDelete(id, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleterole
     * @param {number} userid 
     * @param {string} roleid 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersDeleteroleDelete(userid: number, roleid: string, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersDeleteroleDelete(userid, roleid, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary insert
     * @param {string} [sessionStorage] 
     * @param {Users} [users] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersInsertPost(sessionStorage?: string, users?: Users, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersInsertPost(sessionStorage, users, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary loginuser
     * @param {Users} [users] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersLoginPost(users?: Users, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersLoginPost(users, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logoutUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersLogoutGet(options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersLogoutGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary selectdivide
     * @param {number} pageNum 
     * @param {number} [pageSize] 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersSelectdivideGet(pageNum: number, pageSize?: number, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersSelectdivideGet(pageNum, pageSize, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary selectid
     * @param {number} [id] 
     * @param {boolean} [isstatus] 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersSelectidGet(id?: number, isstatus?: boolean, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersSelectidGet(id, isstatus, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary selectname
     * @param {string} username 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersSelectnameGet(username: string, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersSelectnameGet(username, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary test
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersTestGet(sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersTestGet(sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updates
     * @param {string} [sessionStorage] 
     * @param {Users} [users] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersUpdatePut(sessionStorage?: string, users?: Users, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersUpdatePut(sessionStorage, users, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updatestatus
     * @param {number} id 
     * @param {boolean} status 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyUsersControllerApi
     */
    public usersUpdatestatusPut(id: number, status: boolean, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyUsersControllerApiFp(this.configuration).usersUpdatestatusPut(id, status, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }
}

