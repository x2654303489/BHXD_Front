/* tslint:disable */
/* eslint-disable */
/**
 * 崩坏晓店
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Response } from '../models';
// @ts-ignore
import type { SysRole } from '../models';
/**
 * CopyRoleApi - axios parameter creator
 * @export
 */
export const CopyRoleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addRoleMenu
         * @param {number} roleId 
         * @param {string} menuIds 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleAddrolemenuPost: async (roleId: number, menuIds: string, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('sysRoleAddrolemenuPost', 'roleId', roleId)
            // verify required parameter 'menuIds' is not null or undefined
            assertParamExists('sysRoleAddrolemenuPost', 'menuIds', menuIds)
            const localVarPath = `/sys-role/addrolemenu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (menuIds !== undefined) {
                localVarQueryParameter['menuIds'] = menuIds;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteRoleMenu
         * @param {number} roleId 
         * @param {number} menuIds 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleDeleterolemenuPost: async (roleId: number, menuIds: number, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roleId' is not null or undefined
            assertParamExists('sysRoleDeleterolemenuPost', 'roleId', roleId)
            // verify required parameter 'menuIds' is not null or undefined
            assertParamExists('sysRoleDeleterolemenuPost', 'menuIds', menuIds)
            const localVarPath = `/sys-role/deleterolemenu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (roleId !== undefined) {
                localVarQueryParameter['roleId'] = roleId;
            }

            if (menuIds !== undefined) {
                localVarQueryParameter['menuIds'] = menuIds;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary insert
         * @param {string} [sessionStorage] 
         * @param {SysRole} [sysRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleInsertPost: async (sessionStorage?: string, sysRole?: SysRole, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sys-role/insert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysRole, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary selectdivide
         * @param {number} pageNum 
         * @param {number} [pageSize] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleSelectdivideGet: async (pageNum: number, pageSize?: number, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNum' is not null or undefined
            assertParamExists('sysRoleSelectdivideGet', 'pageNum', pageNum)
            const localVarPath = `/sys-role/selectdivide`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary selectid
         * @param {number} [id] 
         * @param {boolean} [isstatus] 状态
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleSelectidGet: async (id?: number, isstatus?: boolean, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sys-role/selectid`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (isstatus !== undefined) {
                localVarQueryParameter['isstatus'] = isstatus;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updates
         * @param {string} [sessionStorage] 
         * @param {SysRole} [sysRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleUpdatePut: async (sessionStorage?: string, sysRole?: SysRole, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sys-role/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sysRole, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updatestatus
         * @param {number} id 
         * @param {boolean} status 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleUpdatestatusPut: async (id: number, status: boolean, sessionStorage?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('sysRoleUpdatestatusPut', 'id', id)
            // verify required parameter 'status' is not null or undefined
            assertParamExists('sysRoleUpdatestatusPut', 'status', status)
            const localVarPath = `/sys-role/updatestatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (sessionStorage != null) {
                localVarHeaderParameter['sessionStorage'] = String(sessionStorage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CopyRoleApi - functional programming interface
 * @export
 */
export const CopyRoleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CopyRoleApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary addRoleMenu
         * @param {number} roleId 
         * @param {string} menuIds 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysRoleAddrolemenuPost(roleId: number, menuIds: string, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleAddrolemenuPost(roleId, menuIds, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyRoleApi.sysRoleAddrolemenuPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary deleteRoleMenu
         * @param {number} roleId 
         * @param {number} menuIds 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysRoleDeleterolemenuPost(roleId: number, menuIds: number, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleDeleterolemenuPost(roleId, menuIds, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyRoleApi.sysRoleDeleterolemenuPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary insert
         * @param {string} [sessionStorage] 
         * @param {SysRole} [sysRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysRoleInsertPost(sessionStorage?: string, sysRole?: SysRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleInsertPost(sessionStorage, sysRole, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyRoleApi.sysRoleInsertPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary selectdivide
         * @param {number} pageNum 
         * @param {number} [pageSize] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysRoleSelectdivideGet(pageNum: number, pageSize?: number, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleSelectdivideGet(pageNum, pageSize, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyRoleApi.sysRoleSelectdivideGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary selectid
         * @param {number} [id] 
         * @param {boolean} [isstatus] 状态
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysRoleSelectidGet(id?: number, isstatus?: boolean, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleSelectidGet(id, isstatus, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyRoleApi.sysRoleSelectidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary updates
         * @param {string} [sessionStorage] 
         * @param {SysRole} [sysRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysRoleUpdatePut(sessionStorage?: string, sysRole?: SysRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleUpdatePut(sessionStorage, sysRole, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyRoleApi.sysRoleUpdatePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary updatestatus
         * @param {number} id 
         * @param {boolean} status 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sysRoleUpdatestatusPut(id: number, status: boolean, sessionStorage?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sysRoleUpdatestatusPut(id, status, sessionStorage, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CopyRoleApi.sysRoleUpdatestatusPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CopyRoleApi - factory interface
 * @export
 */
export const CopyRoleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CopyRoleApiFp(configuration)
    return {
        /**
         * 
         * @summary addRoleMenu
         * @param {number} roleId 
         * @param {string} menuIds 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleAddrolemenuPost(roleId: number, menuIds: string, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.sysRoleAddrolemenuPost(roleId, menuIds, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary deleteRoleMenu
         * @param {number} roleId 
         * @param {number} menuIds 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleDeleterolemenuPost(roleId: number, menuIds: number, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.sysRoleDeleterolemenuPost(roleId, menuIds, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary insert
         * @param {string} [sessionStorage] 
         * @param {SysRole} [sysRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleInsertPost(sessionStorage?: string, sysRole?: SysRole, options?: any): AxiosPromise<Response> {
            return localVarFp.sysRoleInsertPost(sessionStorage, sysRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary selectdivide
         * @param {number} pageNum 
         * @param {number} [pageSize] 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleSelectdivideGet(pageNum: number, pageSize?: number, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.sysRoleSelectdivideGet(pageNum, pageSize, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary selectid
         * @param {number} [id] 
         * @param {boolean} [isstatus] 状态
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleSelectidGet(id?: number, isstatus?: boolean, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.sysRoleSelectidGet(id, isstatus, sessionStorage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updates
         * @param {string} [sessionStorage] 
         * @param {SysRole} [sysRole] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleUpdatePut(sessionStorage?: string, sysRole?: SysRole, options?: any): AxiosPromise<Response> {
            return localVarFp.sysRoleUpdatePut(sessionStorage, sysRole, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary updatestatus
         * @param {number} id 
         * @param {boolean} status 
         * @param {string} [sessionStorage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sysRoleUpdatestatusPut(id: number, status: boolean, sessionStorage?: string, options?: any): AxiosPromise<Response> {
            return localVarFp.sysRoleUpdatestatusPut(id, status, sessionStorage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CopyRoleApi - object-oriented interface
 * @export
 * @class CopyRoleApi
 * @extends {BaseAPI}
 */
export class CopyRoleApi extends BaseAPI {
    /**
     * 
     * @summary addRoleMenu
     * @param {number} roleId 
     * @param {string} menuIds 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyRoleApi
     */
    public sysRoleAddrolemenuPost(roleId: number, menuIds: string, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyRoleApiFp(this.configuration).sysRoleAddrolemenuPost(roleId, menuIds, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary deleteRoleMenu
     * @param {number} roleId 
     * @param {number} menuIds 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyRoleApi
     */
    public sysRoleDeleterolemenuPost(roleId: number, menuIds: number, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyRoleApiFp(this.configuration).sysRoleDeleterolemenuPost(roleId, menuIds, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary insert
     * @param {string} [sessionStorage] 
     * @param {SysRole} [sysRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyRoleApi
     */
    public sysRoleInsertPost(sessionStorage?: string, sysRole?: SysRole, options?: RawAxiosRequestConfig) {
        return CopyRoleApiFp(this.configuration).sysRoleInsertPost(sessionStorage, sysRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary selectdivide
     * @param {number} pageNum 
     * @param {number} [pageSize] 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyRoleApi
     */
    public sysRoleSelectdivideGet(pageNum: number, pageSize?: number, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyRoleApiFp(this.configuration).sysRoleSelectdivideGet(pageNum, pageSize, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary selectid
     * @param {number} [id] 
     * @param {boolean} [isstatus] 状态
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyRoleApi
     */
    public sysRoleSelectidGet(id?: number, isstatus?: boolean, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyRoleApiFp(this.configuration).sysRoleSelectidGet(id, isstatus, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updates
     * @param {string} [sessionStorage] 
     * @param {SysRole} [sysRole] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyRoleApi
     */
    public sysRoleUpdatePut(sessionStorage?: string, sysRole?: SysRole, options?: RawAxiosRequestConfig) {
        return CopyRoleApiFp(this.configuration).sysRoleUpdatePut(sessionStorage, sysRole, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary updatestatus
     * @param {number} id 
     * @param {boolean} status 
     * @param {string} [sessionStorage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopyRoleApi
     */
    public sysRoleUpdatestatusPut(id: number, status: boolean, sessionStorage?: string, options?: RawAxiosRequestConfig) {
        return CopyRoleApiFp(this.configuration).sysRoleUpdatestatusPut(id, status, sessionStorage, options).then((request) => request(this.axios, this.basePath));
    }
}

